:? for help in gchi

Keywords:
!: 
'
''
-
--
-<
-<<
->
::
;
<-
=
=>
>
?
#
*
@
[|, |]
\
_
`
{, }
{-, -}
|
~
as
case, of
class
data
data family
instance
default
deriving
deriving instance
do
forall
foreign
hiding
if, then, else
import
infix, infixl, infixr
instance
let, in
mdo
module
newtype
proc
qualified
rec
type
type family
type instance
where

Arithmetic:
Addition:       +
Subtraction:    -
Multiplication: *
Division:       /
Exponentiation: ^

Notes:
5/3 will provide the floating point result.

String concatenation: ++
[Char] means String

Math functions:
succ
truncate
round
sqrt
not
gcd

I/O Functions:

print
putStr
putStrLn

getLine: gives back a string
readLn: gives back whatever type you want

do { n <- readLn ; print (n^2) }

Language:

_ means "anything else" (all the other cases)

data Maybe a = Just a | Nothing
a is a type variable.
Just and Nothing are constructors.

Data Types

(): unit data type. only has ony value: ().

[1, 2, 3]: lists
(1, True): tuples

: operator appends items to the beginning of a list

data Tree a = Branch (Tree a) (Tree a) | Leaf a

Tree is a type constructor. Branch and Leaf are data constructors.

"type" creates a synonym:
type Name = String

newtype: ?

do blocks: 
do { ation ; action }

Type checking:
":t x" will return the type of the variable x.

Lists:
items must be of the same type

length xs : return size of list

reverse xs : return a reversed list

xs !! n : return nth element 

head xs : return first element
last xs : return last element

the following two functions work on anything that is a member of the Ord
class:
minimum xs
maximum xs

x:xs : add an element to the beginning of a list

xs ++ [x] : add an element to the end of a list

let(ys,zs) = splitAt n xs in ys ++ [x] ++ zs

list1 ++ list 2 : join two lists

drop n xs : delete the first n elements from the list

tail xs : removes just one element
init xs : removes just the last element

splitAt n xs : split a list into two smaller lists at the nth position (return
a tuple of two lists)

null xs : check if the list is empty

any test xs : test whether anything passes this test

all test xs : test whether everything passes this test

map (\x -> if p x then f x else x) xs : applies the function f to only the
                                        elements for which p returns true

map ($ x) xs : apply a list of functions (xs) to a single element (x) and get
               a list of results

sum xs : returns a sum of the list

product xs : returns a product of the list

sort xs : first you must import Data.List

x `elem` xs : find out if x is in the list

zip: function that turns two lists into a list of tuples
zipWith: create a list by applying the function to corresponding elements
map func list:    applies function func to each item in the list and returns
                  resulting list
filter func list: applies function func to each item in the list, returns list
                  of items for which the function is true

list comprehensions:

[ f x | x <- xs ]

means "the list of all f x such that x is drawn from xs"
x <- xs is called a generator. multiple are allowed:

[ (x,y) | x <- xs, y <- ys]

if xs were [1,2] and ys were [3,4], the result would be [(1,3), (1,4), (2,3), (2,4)]

guards place constraints on the elements generated:

quicksort []     = []
quicksort (x:xs) =  quicksort [y | y <- xs, y<x ]
                 ++ [x]
                 ++ quicksort [y | y <- xs, y>=x]

[1..10] => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1,3..10] => [1,3,5,7,9]
[1,3,..] => [1,3,5,7,9,.. (infinite sequence)

fib = 1 : 1 : [ a+b | (a,b) <- zip fib (tail fib) ]

fib@(1:tfib) = 1 : 1 : [ a+b | (a,b) <- zip fib tfib ]

Tuples:
May combine items of different types.
fst: returns first element of 2-tuple
snd: returns second element of 2-tuple

Functions:

